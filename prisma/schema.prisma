// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Teacher {
  teacherId  String   @id
  name       String
  email      String   @unique
  phone      String?
  department String?
  password   String?
  // Google OAuth fields
  googleId String? @unique
  picture  String?

  createdAt DateTime @default(now())

  students       Student[]
  projects       Project[]
  phdSupervision PhdSupervision[]
  fellowships    Fellowship[]
}

model Student {
  studentId       String   @id
  name            String
  email           String   @unique
  phone           String?
  dob             DateTime
  department      String?
  currentSemester Int
  batchId         String?
  
  // Parent/Guardian Information
  parentName      String?
  parentEmail     String?
  parentPhone     String?
  address         String?

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [teacherId], onDelete: SetNull)
  
  batch     Batch?   @relation(fields: [batchId], references: [batchId], onDelete: SetNull)

  attendance    Attendance[]
  testScores    TestScore[]
  backlogs      Backlog[]
  feePayments   FeePayment[]
  riskFlags     RiskFlag[]
  notifications Notification[]
  
  // Research supervision relationships
  projects      Project[]
  phdSupervision PhdSupervision[]
  fellowships   Fellowship[]

  @@index([teacherId])
  @@index([batchId])
}

model CourseSubject {
  courseId   String @id
  name       String
  code       String
  semester   Int
  department String

  attendance Attendance[]
  testScores TestScore[]
  backlogs   Backlog[]
  batches    Batch[]
}

model Attendance {
  attendanceId      Int      @id @default(autoincrement())
  studentId         String
  courseId          String
  month             DateTime
  attendancePercent Float

  student       Student       @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  courseSubject CourseSubject @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@index([studentId])
  @@index([courseId])
}

model TestScore {
  testId    Int      @id @default(autoincrement())
  studentId String
  courseId  String
  testDate  DateTime
  score     Float

  student       Student       @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  courseSubject CourseSubject @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@index([studentId])
  @@index([courseId])
}

model Backlog {
  backlogId Int     @id @default(autoincrement())
  studentId String
  courseId  String
  attempts  Int
  cleared   Boolean

  student       Student       @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  courseSubject CourseSubject @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@index([studentId])
  @@index([courseId])
}

model FeePayment {
  paymentId Int      @id @default(autoincrement())
  studentId String
  dueDate   DateTime
  paidDate  DateTime?
  status    String
  dueMonths Int

  student Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@index([studentId])
}

model RiskFlag {
  riskId    Int      @id @default(autoincrement())
  studentId String
  riskLevel String
  reason    String
  flagDate  DateTime

  student Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@index([studentId])
}

model Notification {
  notificationId Int      @id @default(autoincrement())
  studentId      String
  channel        String
  message        String
  sentDate       DateTime
  acknowledged   Boolean  @default(false)

  student Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)

  @@index([studentId])
}

model Batch {
  batchId    String @id
  batchNo    String
  courseId   String
  year       Int
  department String
  
  course   CourseSubject @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  students Student[]
  
  @@index([courseId])
}

model Project {
  projectId   Int      @id @default(autoincrement())
  title       String
  description String?
  studentId   String
  supervisorId String
  startDate   DateTime
  endDate     DateTime?
  status      String   @default("Active") // Active, Completed, Suspended
  
  student    Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  supervisor Teacher @relation(fields: [supervisorId], references: [teacherId], onDelete: Cascade)
  
  @@index([studentId])
  @@index([supervisorId])
}

model PhdSupervision {
  phdId        Int      @id @default(autoincrement())
  title        String
  researchArea String
  studentId    String
  supervisorId String
  startDate    DateTime
  expectedEnd  DateTime?
  status       String   @default("Ongoing") // Ongoing, Completed, Discontinued
  
  student    Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  supervisor Teacher @relation(fields: [supervisorId], references: [teacherId], onDelete: Cascade)
  
  @@index([studentId])
  @@index([supervisorId])
}

model Fellowship {
  fellowshipId Int      @id @default(autoincrement())
  type         String   // Full Time, Part Time
  amount       Float
  duration     Int      // in months
  studentId    String
  supervisorId String
  startDate    DateTime
  endDate      DateTime?
  status       String   @default("Active") // Active, Completed, Terminated
  
  student    Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  supervisor Teacher @relation(fields: [supervisorId], references: [teacherId], onDelete: Cascade)
  
  @@index([studentId])
  @@index([supervisorId])
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator zod {
  createRelationValuesTypes = true
  output                    = "../app/generated/zod"
  provider                  = "zod-prisma-types"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
